-- =========================================================
--  Load Script Bronze Layer
--  Note:
--    - Jika file CSV ada di C:\Users\..., gunakan \copy di psql
--    - Jika file CSV ada di D:\ atau folder lain, gunakan COPY di Query Tool pgAdmin
-- =========================================================


-- =========================================================
-- 1. Import CSV dengan \copy (SQL Shell psql)
-- =========================================================
-- Contoh:
-- \copy bronze.crm_cust_info 
-- FROM 'C:/Users/User/Documents/Projects/0.Data Warehouse Postgres Sql/DataSet/source_crm/cust_info.csv' 
-- WITH (
--     FORMAT csv, 
--     HEADER true, 
--     DELIMITER ','
-- );


-- =========================================================
-- 2. Import CSV dengan COPY (Query Tool pgAdmin)
-- =========================================================
-- Contoh:
-- COPY bronze.crm_cust_info 
-- FROM 'D:/Project/0.Data Warehouse Postgres Sql/DataSet/source_crm/cust_info.csv' 
-- WITH (
--     FORMAT csv, 
--     HEADER true, 
--     DELIMITER ','
-- );


-- =========================================================
-- 3. Stored Procedure untuk Load Data Bronze
-- =========================================================
CREATE OR REPLACE PROCEDURE bronze.cek_data(
    nt varchar,   -- nama tabel
    sp varchar    -- path file CSV
)
LANGUAGE plpgsql
AS $$
DECLARE
    count_row int;
    count_tb int;
    start_time timestamp;
    end_time timestamp;
BEGIN
    -- Catat waktu mulai
    start_time := clock_timestamp();
	BEGIN -- BEGIN untuk error handling table
    -- Cek apakah tabel sudah ada isinya
    EXECUTE format('SELECT count(*) FROM bronze.%I', nt) INTO count_row;
	exception
		WHEN undefined_table THEN
      		RAISE NOTICE 'Tabel bronze.% tidak ditemukan', nt;
     		RETURN;
  	END;
	  
    IF count_row > 0 THEN
        RAISE NOTICE 'Tabel % sudah terisi', nt;
    ELSE
	BEGIN -- eror handling proses insert --
        -- Load data dengan COPY
        EXECUTE format(
            'COPY bronze.%I 
             FROM %L
             WITH (FORMAT csv, HEADER true, DELIMITER '','')', nt, sp
        );

        -- Cek jumlah data setelah insert
        EXECUTE format('SELECT count(*) FROM bronze.%I', nt) INTO count_tb;
        RAISE NOTICE 'Tabel % berhasil diinsert dengan total baris %', nt, count_tb;
		exception
		WHEN others  THEN
			RAISE NOTICE 'Terjadi error saat proses: %', SQLERRM;
      END;
        -- Catat waktu selesai
        end_time := clock_timestamp();

        -- Hitung durasi
        RAISE NOTICE 'Durasi proses: %', age(end_time, start_time);
    END IF;
END;
$$;


-- =========================================================
-- 4. Execute Store Procedure Procedure
-- =========================================================

-- Data CRM
call bronze.cek_data('crm_cust_info',     'D:/Project/0.Data Warehouse Postgres Sql/DataSet/source_crm/cust_info.csv');
call bronze.cek_data('crm_prd_info',      'D:/Project/0.Data Warehouse Postgres Sql/DataSet/source_crm/prd_info.csv');
call bronze.cek_data('crm_sales_details', 'D:/Project/0.Data Warehouse Postgres Sql/DataSet/source_crm/sales_details.csv');

-- Data ERP
call bronze.cek_data('erp_cust_az12',     'D:/Project/0.Data Warehouse Postgres Sql/DataSet/source_erp/CUST_AZ12.csv');
call bronze.cek_data('erp_loc_a101',      'D:/Project/0.Data Warehouse Postgres Sql/DataSet/source_erp/LOC_A101.csv');
call bronze.cek_data('erp_px_cat_g1v2',   'D:/Project/0.Data Warehouse Postgres Sql/DataSet/source_erp/PX_CAT_G1V2.csv');
