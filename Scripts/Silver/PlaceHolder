-- ==============================================================
-- crm_cust_info
-- ==============================================================
-- Normalisasi dan validasi primary key
-- ==============================================================
-- Cek duplikasi pada primary key
SELECT cst_id, COUNT(*)
FROM bronze.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1;
-- ==============================================================
-- TRANSFORMASI DATA
-- ==============================================================
-- Menghapus baris duplikat berdasarkan cst_id dan ambil data terbaru
-- ==============================================================
WITH Transform_1 AS (
    SELECT 
        cst_id,
        cst_key,
        cst_firstname,
        cst_lastname,
        cst_marital_status,
        cst_gndr,
        cst_create_date
    FROM (
        SELECT 
            *,
            RANK() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS last_insert
        FROM bronze.crm_cust_info
    ) sub
    WHERE last_insert = 1 AND cst_id IS NOT NULL
),
-- ==============================================================
-- STANDARISASI DATA
-- ==============================================================
-- Membersihkan string kosong dan ubah gender serta marital status
-- ==============================================================
Transform_2 AS (
    SELECT 
        cst_id,
        cst_key,
        INITCAP(TRIM(cst_firstname)) AS cst_firstname,
        INITCAP(TRIM(cst_lastname)) AS cst_lastname,
        CASE 
            WHEN cst_gndr = 'M' THEN 'Male'
            WHEN cst_gndr = 'F' THEN 'Female'
            ELSE 'n/a'
        END AS cst_gndr,
        CASE 
            WHEN cst_marital_status = 'M' THEN 'Married'
            WHEN cst_marital_status = 'S' THEN 'Single'
            ELSE 'n/a'
        END AS cst_marital_status,
        cst_create_date
    FROM Transform_1
)
-- ==============================================================
-- OUTPUT DATA Hasil Transformasi 
-- ==============================================================

-- ==============================================================
-- erp_cust_az12
-- ==============================================================
SELECT * 
FROM Transform_2

-- mengeecek missing value -- 
select * from bronze."erp_cust_az12"
where cid is null

select * from bronze."erp_cust_az12"
where bdate is null

select * from bronze."erp_cust_az12"
where gen is null

-- standarisasi column customer id erp supaya sama ke crm --
select case when cid like 'NAS%' then substring(cid from 4 for length(cid)) 
else cid
end as  cid,
bdate,
case 
when gen in ('F','Female') then 'Female'
when gen in ('M','Male') then 'Male'
else 'n/a'
end as gen
from bronze."erp_cust_az12"


-- ==============================================================
-- erp_loc_a101
-- ==============================================================

-- mengeecek missing value -- 
select * from bronze."erp_loc_a101"
where cntry is null

select * from bronze."erp_loc_a101"
where cid is null

-- mengcek duplikat
select count(*) from bronze."erp_loc_a101"
group by cntry,cid
having count(*) > 1 


-- standarisasi column customer id erp supaya sama ke crm --
select concat(substring(cid from 1 for 2) , substring(cid from 4 for length(cid))), 
cntry 
from (
select 
case when 
cid like 'NAS%' then substring(cid from 1 for length(cid)) 
else cid 
end as cid,
case 
when trim(cntry) in ('US','United States') then 'United States'
when trim(cntry) = 'de' then 'Denmark'
when trim(cntry) = '' or cntry is null then 'n/a'
else trim(cntry)
end as cntry
from bronze."erp_loc_a101"
)

-- ==============================================================
-- crm_prd_info
-- ==============================================================
--standarisasi--
select 
substring(prd_key from 7 for length(prd_key)) as sls_prd_key,
prd_id,
prd_key,
substring(prd_key from 1 for 5) as prd_cat_key,
coalesce (prd_cost,0),
case 
when lower(trim(prd_line)) = 'r' then 'Road'
when lower(trim(prd_line)) = 'm' then 'Mountain'
when lower(trim(prd_line)) = 't' then 'Touring'
when lower(trim(prd_line)) = 's' then 'Sales'
else 'Other'
end as prd_line,
prd_start_dt,
prd_end_dt
from bronze."crm_prd_info"

-- ==============================================================
-- erp_px_cat_g1v2
-- ==============================================================
select id,cat,subcat,maintenance from bronze."erp_px_cat_g1v2"

-- ==============================================================
-- crm_sales_details
-- ==============================================================
select * from bronze.etl_log

select * from (
select *,length(sls_order_dt::varchar)  a from bronze."crm_sales_details"
)
where a = 1

-- order_dt 
select count(*) ,a,sls_order_dt from (
select length(sls_order_dt::varchar) a , sls_order_dt from bronze."crm_sales_details"
)
group by a,sls_order_dt


select count(*) ,a from (
select length(sls_order_dt::varchar) a , sls_order_dt from bronze."crm_sales_details"
)
group by a

-- ship_date
select count(*) ,a from (
select length(sls_ship_dt::varchar) a , sls_ship_dt from bronze."crm_sales_details"
)
group by a

select count(*) ,a,sls_ship_dt from (
select length(sls_ship_dt::varchar) a , sls_ship_dt from bronze."crm_sales_details"
)
group by a,sls_ship_dt

-- sls_due_dt -- 
select count(*) ,a from (
select length(sls_due_dt::varchar) a , sls_due_dt from bronze."crm_sales_details"
)
group by a

select 
concat(substring(sls_ship_dt::varchar from 1 for 4 ) , '-', substring(sls_ship_dt::varchar from 5 for 2) , '-',substring(sls_ship_dt::varchar from 7 for 2))::date 
from bronze."crm_sales_details"

SELECT 
concat(substring(sls_due_dt::varchar from 1 for 4 ) , '-', substring(sls_due_dt::varchar from 5 for 2) , '-',substring(sls_due_dt::varchar from 7 for 2))::date 
from bronze."crm_sales_details"

